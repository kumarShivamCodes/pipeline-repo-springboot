pipeline {
    agent {
        docker {
            // Use a Docker image that has Maven, Java 21, and (optionally) Docker CLI installed.
            image 'maven:3.9.5-eclipse-temurin-21'
            // Mount the host Docker socket so the container can run docker commands.
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        // Define your Docker image name (update with your Docker Hub username and image name)
        DOCKER_IMAGE = "rajputuser/docker-shivam-imz:latest"
        // Set the SonarQube URL. Update this IP if needed.
        SONAR_URL = "http://172.17.0.2:9000"
    }

    stages {
        stage('Build and Test') {
            steps {
                // List files (for debugging) and run Maven to clean, compile, test, and package your app.
                sh 'ls -ltr'
                sh 'mvn clean package'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                // Run SonarQube analysis using Maven.
                // Credentials for SonarQube are injected via SONAR_TOKEN.
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_TOKEN')]) {
                    sh 'mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=${SONAR_URL}'
                    echo 'SonarQube analysis completed successfully!'
                }
            }
        }

        stage('Build Docker Image') {
            //agent {
                            //docker {
                                //image 'abhishekf5/maven-abhishek-docker-agent:v1'
                                 //args '--user root --privileged -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
                                 //}
                        //}
            steps {
                // Build the Docker image using the Dockerfile in the workspace.
                //sh 'docker build -t $DOCKER_IMAGE .'
                sh '''
                            apt-get update && apt-get install -y docker.io
                            docker build -t $DOCKER_IMAGE .
                        '''
            }
        }

        stage('Push Docker Image') {
            //agent {
                            //docker {
                                //image 'abhishekf5/maven-abhishek-docker-agent:v1'
                                 //args '--user root --privileged -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
                                 //}
                        //}
            steps {
                // Log in to Docker Hub and push the built image.
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }

        stage('Deploy to EC2') {
            //agent {
                //docker {
                    //image 'abhishekf5/maven-abhishek-docker-agent:v1'
                     //args '--user root --privileged -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
                     //}
            //}
            steps {

                sh 'apt-get update && apt-get install -y openssh-client' // Install SSH client
                // Deploy to an EC2 instance via SSH.
                withCredentials([sshUserPrivateKey(credentialsId: '44.201.73.19', keyFileVariable: 'EC2_KEY', usernameVariable: 'ubuntu')]) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no -i $EC2_KEY $EC2_USER@44.201.73.19 <<EOF
                        docker pull $DOCKER_IMAGE
                        docker stop springboot-app || true
                        docker rm springboot-app || true
                        docker run -d --name springboot-app -p 8081:8081 $DOCKER_IMAGE
                        EOF
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean the workspace after the pipeline completes.
        }
    }
}
